/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 compressed.glb --transform
Files: compressed.glb [238.43KB] > /Users/kk/MyDocuments/06_work/Webproduct/meloemo-lp/dev-env/compressed-transformed.glb [242.35KB] (-2%)
*/

import React, { useRef } from 'react';
import { useGLTF, PerspectiveCamera } from '@react-three/drei';

export function Compressed(props) {
  const { nodes, materials } = useGLTF('./model/compressed-transformed.glb');
  return (
    <group {...props} dispose={null}>
          {/* <PerspectiveCamera
        makeDefault={false}
        far={2}
        near={0}
        fov={0}
        position={[0,0,0]}
        rotation={[0, 0, 0]}
      /> */}
          <mesh
            geometry={nodes.cdCase_closed_shell_down.geometry}
            material={materials.pla}
            position={[0, 0, 0]}
            scale={1}
          />
          <mesh
            geometry={nodes.cdCase_closed_shell_up.geometry}
            material={materials.glass}
            position={[0, 0, 0]}
            scale={1}
          />
          <mesh
            geometry={nodes.cdCase_closed_blackDisc.geometry}
            material={materials.cdCase_closed_blackPlastic_Mat}
            position={[0, 0, 0]}
            scale={1}
          />
          <mesh
            geometry={nodes.cdCase_closed_poster.geometry}
            material={materials.cdCase_closed_poster_Mat}
            position={[0, 0, 0]}
            scale={1}
          />
    </group>
  );
}

useGLTF.preload('./model/compressed-transformed.glb');
